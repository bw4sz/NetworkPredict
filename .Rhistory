#fit regression for each input estimate
sampletraj<-list()
for (y in 1:nrow(inp)){
v=inv.logit(inp$alpha[[y]] + inp$beta1[[y]] * x + inp$beta2[[y]] * resources + inp$beta3[[y]] * x*resources)
sampletraj[[y]]<-data.frame(x=as.numeric(x),y=as.numeric(v),r=rownames(inp)[y])
}
sample_all<-rbind_all(sampletraj)
sample_all
dcast(sample_all,x~r)
#fit regression for each input estimate
sampletraj<-list()
for (y in 1:nrow(indat)){
v=inv.logit(indat$alpha[y] + indat$beta1[y] * x + indat$beta2[y] * resources + indat$beta3[y] * x*resources)
sampletraj[[y]]<-data.frame(x=as.numeric(x),y=as.numeric(v))
}
sample_all<-rbind_all(sampletraj)
#Compute CI intervals
predy<-group_by(sample_all,x) %>% summarise(lower=quantile(y,0.025,na.rm=T),upper=quantile(y,0.975,na.rm=T),mean=mean(y,na.rm=T))
predy
inp<-list(alpha,beta1,beta2,beta3)
names(inp)<-c("alpha","beta1","beta2","beta3")
inp<-data.frame(sapply(inp,function(x){
data.frame(mean=mean(x),lower=quantile(x,0.5),upper=quantile(x,0.95))
}))
#fit regression for each input estimate
sampletraj<-list()
for (y in 1:nrow(inp)){
v=inv.logit(inp$alpha[[y]] + inp$beta1[[y]] * x + inp$beta2[[y]] * resources + inp$beta3[[y]] * x*resources)
sampletraj[[y]]<-data.frame(x=as.numeric(x),y=as.numeric(v),r=rownames(inp)[y])
}
sample_all<-rbind_all(sampletraj)
sample_all
sampletraj
sample_all<-rbind_all(sampletraj)
head(pprecip)
predy
sample_all
dcast(sample_all,x~r)
v=inv.logit(inp$alpha[[y]] + inp$beta1[[y]] * x + inp$beta2[[y]] * resources + inp$beta3[[y]] * x*resources)
v
sampletraj[[y]]<-data.frame(x=as.numeric(x),y=as.numeric(v),r=rownames(inp)[y])
inp<-list(alpha,beta1,beta2,beta3)
names(inp)<-c("alpha","beta1","beta2","beta3")
inp<-data.frame(sapply(inp,function(x){
data.frame(mean=mean(x),lower=quantile(x,0.5),upper=quantile(x,0.95))
}))
#fit regression for each input estimate
sampletraj<-list()
for (y in 1:nrow(inp)){
v=inv.logit(inp$alpha[[y]] + inp$beta1[[y]] * x + inp$beta2[[y]] * resources + inp$beta3[[y]] * x*resources)
sampletraj[[y]]<-data.frame(x=as.numeric(x),y=as.numeric(v),r=rownames(inp)[y])
}
sample_all<-rbind_all(sampletraj)
sample_all
dcast(sample_all,x~r)
ggplot(sample_all) + geom_line(aes(x=x,y=y,col=r))
ggplot(sample_all) + geom_ribbon(aes(x=x,y=y,col=r))
inp<-list(alpha,beta1,beta2,beta3)
names(inp)<-c("alpha","beta1","beta2","beta3")
inp<-data.frame(sapply(inp,function(x){
data.frame(mean=mean(x),lower=quantile(x,0.5),upper=quantile(x,0.95))
}))
#fit regression for each input estimate
sampletraj<-list()
for (y in 1:nrow(inp)){
v=inv.logit(inp$alpha[[y]] + inp$beta1[[y]] * x + inp$beta2[[y]] * resources + inp$beta3[[y]] * x*resources)
sampletraj[[y]]<-data.frame(x=as.numeric(x),y=as.numeric(v),r=rownames(inp)[y])
}
sampletraj
inp<-list(alpha,beta1,beta2,beta3)
names(inp)<-c("alpha","beta1","beta2","beta3")
inp<-data.frame(sapply(inp,function(x){
data.frame(mean=mean(x),lower=quantile(x,0.5),upper=quantile(x,0.95))
}))
#fit regression for each input estimate
sampletraj<-list()
for (y in 1:nrow(inp)){
v=inv.logit(inp$alpha[[y]] + inp$beta1[[y]] * x + inp$beta2[[y]] * resources + inp$beta3[[y]] * x*resources)
sampletraj[[y]]<-data.frame(x=as.numeric(x),y=as.numeric(v),r=rownames(inp)[y])
}
inp
dcast(sample_all,x~r)
dcast(sample_all,x~r,mean)
}predy
predy
inp<-list(alpha,beta1,beta2,beta3)
names(inp)<-c("alpha","beta1","beta2","beta3")
inp<-data.frame(sapply(inp,function(x){
data.frame(mean=mean(x),lower=quantile(x,0.5),upper=quantile(x,0.95))
}))
#fit regression for each input estimate
sampletraj<-list()
for (y in 1:nrow(inp)){
v=inv.logit(inp$alpha[[y]] + inp$beta1[[y]] * x + inp$beta2[[y]] * resources + inp$beta3[[y]] * x*resources)
sampletraj[[y]]<-data.frame(x=as.numeric(x),y=as.numeric(v))
}
sampletraj
inp<-list(alpha,beta1,beta2,beta3)
names(inp)<-c("alpha","beta1","beta2","beta3")
inp<-data.frame(sapply(inp,function(x){
data.frame(mean=mean(x),lower=quantile(x,0.5),upper=quantile(x,0.95))
}))
#fit regression for each input estimate
sampletraj<-list()
for (y in 1:nrow(inp)){
v=inv.logit(inp$alpha[[y]] + inp$beta1[[y]] * x + inp$beta2[[y]] * resources + inp$beta3[[y]] * x*resources)
sampletraj[[y]]<-as.numeric(v)
}
sampletraj
melt(sampletraj)
inp
names(sampletraj)<-rownames(inp)
sampletraj
melt(sampletraj)
inp<-list(alpha,beta1,beta2,beta3)
names(inp)<-c("alpha","beta1","beta2","beta3")
inp<-data.frame(sapply(inp,function(x){
data.frame(mean=mean(x),lower=quantile(x,0.5),upper=quantile(x,0.95))
}))
#fit regression for each input estimate
sampletraj<-list()
for (y in 1:nrow(inp)){
v=inv.logit(inp$alpha[[y]] + inp$beta1[[y]] * x + inp$beta2[[y]] * resources + inp$beta3[[y]] * x*resources)
sampletraj[[y]]<-data.frame(x=x,y=as.numeric(v))
}
names(sampletraj)<-rownames(inp)
sampletraj
melt(sampletraj)
sample_all<-melt(sampletraj,id.var="x")
sample_all
head(sample_all)
dcast(sample_all,x~L1)
indat<-data.frame(alpha,beta1,beta2,beta3)
#fit regression for each input estimate
sampletraj<-list()
for (y in 1:nrow(indat)){
v=inv.logit(indat$alpha[y] + indat$beta1[y] * x + indat$beta2[y] * resources + indat$beta3[y] * x*resources)
sampletraj[[y]]<-data.frame(x=as.numeric(x),y=as.numeric(v))
}
sample_all<-rbind_all(sampletraj)
sample_all
predy<-group_by(sample_all,x) %>% summarise(lower=quantile(y,0.025,na.rm=T),upper=quantile(y,0.975,na.rm=T),mean=mean(y,na.rm=T))
predy
lsos()
lapply(species.traj,nrow)
species.traj
trajF(alpha=x$alpha,beta1=x$beta1,beta2=x$beta2,beta3=x$beta3,resources=billd$scaledR,x=billd$Traitmatch)
castdf<-dcast(pars_detect[pars_detect$par %in% c("beta1","beta2","beta3","alpha"),], species +Chain +Draw ~par ,value.var="estimate")
#Turn to
castdf$species<-factor(castdf$species,levels=1:max(as.numeric(castdf$species)))
species.split<-split(castdf,list(castdf$species),drop = T)
species.traj<-list()
for(d in 1:length(species.split)){
x<-species.split[[d]]
index<-unique(x$species)
#get data for those species
billd<-indat[indat$jBird %in% index,]
#scale resources
species.traj[[d]]<-trajF(alpha=x$alpha,beta1=x$beta1,beta2=x$beta2,beta3=x$beta3,resources=billd$scaledR,x=billd$Traitmatch)
}
names(species.traj)<-names(species.split)
species.traj<-melt(species.traj,id.var=colnames(species.traj[[1]]))
#split out names and model
species.traj[,c("Index")]<-colsplit(species.traj$L1,"\\.",c("Index"))
spe<-merge(species.traj,jagsIndexBird,by.x="Index",by.y="jBird")
indat<-data.frame(alpha,beta1,beta2,beta3)
#fit regression for each input estimate
sampletraj<-list()
for (y in 1:nrow(indat)){
v=inv.logit(indat$alpha[y] + indat$beta1[y] * x + indat$beta2[y] * resources + indat$beta3[y] * x*resources)
sampletraj[[y]]<-data.frame(x=as.numeric(x),y=as.numeric(v))
}
sample_all<-rbind_all(sampletraj)
y
v=inv.logit(indat$alpha[y] + indat$beta1[y] * x + indat$beta2[y] * resources + indat$beta3[y] * x*resources)
resources
x
dim(species.traj)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
dim(castdf)
head(castdf)
range(castdf$Draw)
nrow(castdf)
tail(castdf)
source('~/.active-rstudio-document', echo=TRUE)
save.image("ObservedModel.RData")
newModel
source('~/.active-rstudio-document', echo=TRUE)
9356.78/60
9356.78/60/60
source('~/NetworkPredict/Bayesian/BayesFunctions.R', echo=TRUE)
load("ObservedModel.RData")
#Trajectories from posterior
predy<-trajF(alpha=castdf$alpha_mu,beta1=castdf$beta1_mu,x=indat$Traitmatch,resources=indat$scaledR,beta2=castdf$beta2_mu,beta3=castdf$beta3_mu)
ggplot(data=predy,aes(x=x)) + geom_ribbon(aes(ymin=lower,ymax=upper),alpha=0.4,fill="red")  +  theme_bw() + ylab("Interactions") + xlab("Difference between Bill and Corolla Length") + geom_point(data=indat,aes(x=Traitmatch,y=Camera)) + geom_line(aes(y=mean)) + geom_point(data=indat,aes(x=Traitmatch,y=Transect))
castdf<-dcast(pars_detect[pars_detect$par %in% c("beta1_mu","beta2_mu","beta3_mu","alpha_mu"),], Chain + Draw~par,value.var="estimate")
predy<-trajF(alpha=castdf$alpha_mu,beta1=castdf$beta1_mu,x=indat$Traitmatch,resources=indat$scaledR,beta2=castdf$beta2_mu,beta3=castdf$beta3_mu)
ggplot(data=predy,aes(x=x)) + geom_ribbon(aes(ymin=lower,ymax=upper),alpha=0.4,fill="red")  +  theme_bw() + ylab("Interactions") + xlab("Difference between Bill and Corolla Length") + geom_point(data=indat,aes(x=Traitmatch,y=Camera)) + geom_line(aes(y=mean)) + geom_point(data=indat,aes(x=Traitmatch,y=Transect))
trajF
source('~/NetworkPredict/Bayesian/BayesFunctions.R', echo=TRUE)
source("Bayesian/BayesFunctions.R")
castdf<-dcast(pars_detect[pars_detect$par %in% c("beta1_mu","beta2_mu","beta3_mu","alpha_mu"),], Chain + Draw~par,value.var="estimate")
predy<-trajF(alpha=castdf$alpha_mu,beta1=castdf$beta1_mu,x=indat$Traitmatch,resources=indat$scaledR,beta2=castdf$beta2_mu,beta3=castdf$beta3_mu)
ggplot(data=predy,aes(x=x)) + geom_ribbon(aes(ymin=lower,ymax=upper),alpha=0.4,fill="red")  +  theme_bw() + ylab("Interactions") + xlab("Difference between Bill and Corolla Length") + geom_point(data=indat,aes(x=Traitmatch,y=Camera)) + geom_line(aes(y=mean)) + geom_point(data=indat,aes(x=Traitmatch,y=Transect))
trajF
predH<-trajF(alpha=castdf$alpha_mu,beta1=castdf$beta1_mu,x=indat[indat$BAll_Flowers==1,"Traitmatch"],resources=indat[indat$ BAll_Flowers==1,"scaledR"],beta2=castdf$beta2_mu,beta3=castdf$beta3_mu)
predL<-trajF(alpha=castdf$alpha_mu,beta1=castdf$beta1_mu,x=indat[indat$BAll_Flowers==0,"Traitmatch"],resources=indat[indat$ BAll_Flowers==0,"scaledR"],beta2=castdf$beta2_mu,beta3=castdf$beta3_mu)
predhl<-melt(list(High=predH,Low=predL),id.vars=colnames(predH))
colnames(predhl)[5]<-"BFlowerL"
indat$BFlowerL<-factor(as.character(indat$BAll_Flowers))
levels(indat$BFlowerL)<-c("Low","High")
ggplot(data=predhl,aes(x=x)) + geom_ribbon(aes(ymin=lower,ymax=upper,fill=BFlowerL),alpha=0.2)  + geom_line(aes(y=mean,col=BFlowerL),size=.8) + theme_bw() + ylab("Interactions") + xlab("Difference between Bill and Corolla Length") + geom_point(data=mindat,aes(x=Traitmatch,y=value))+ labs(fill="Resource Availability",col="Resource Availability")
haed(predhl)
head(predhl)
predhl$BFlowerL
table(predhl$y,predhl$BFlowerL)
head(predhl)
table(predhl$mean,predhl$BFlowerL)
indat[indat$ BAll_Flowers==0,"scaledR"]
indat[indat$BAll_Flowers==1,"Traitmatch"]
indat[indat$BAll_Flowers==0,"Traitmatch"]
castdf$alpha_mu
beta3=castdf$beta3_mu
castdf$beta3_mu
round(castdf$beta3_mu)
round(castdf$beta3_mu,1)
round(castdf$beta3_mu,2)
ggplot(pars_detect[pars_detect$par %in% c("beta3_mu","beta3_sigma","beta2_mu","beta2_sigma","beta1_mu","beta1_sigma","alpha_mu","alpha_sigma","dprior_cam","dprior_trans"),],aes(x=estimate)) + geom_histogram() + ggtitle("Group Level Posteriors") + facet_wrap(~par,scale="free",nrow=2) + theme_bw()
castdf<-dcast(pars_detect[pars_detect$par %in% c("beta1_mu","beta2_mu","beta3_mu","alpha_mu"),], Chain + Draw~par,value.var="estimate")
ggplot(data=predy,aes(x=x)) + geom_ribbon(aes(ymin=lower,ymax=upper),alpha=0.4,fill="red")  +  theme_bw() + ylab("Interactions") + xlab("Difference between Bill and Corolla Length") + geom_point(data=indat,aes(x=Traitmatch,y=Camera)) + geom_line(aes(y=mean)) + geom_point(data=indat,aes(x=Traitmatch,y=Transect))
castdf$alpha_mu
castdf$beta1_mu
indat$Traitmatch
predy<-trajF(alpha=castdf$alpha_mu,beta1=castdf$beta1_mu,x=indat$Traitmatch,resources=indat$scaledR,beta2=castdf$beta2_mu,beta3=castdf$beta3_mu)
ggplot(data=predy,aes(x=x)) + geom_ribbon(aes(ymin=lower,ymax=upper),alpha=0.4,fill="red")  +  theme_bw() + ylab("Interactions") + xlab("Difference between Bill and Corolla Length") + geom_point(data=indat,aes(x=Traitmatch,y=Camera)) + geom_line(aes(y=mean)) + geom_point(data=indat,aes(x=Traitmatch,y=Transect))
head(predy)
predy$mean
predhl
head(predhl)
ggplot(predhl,aes(x=mean,col=BFlowerL)) + geom_boxplot()
ggplot(predhl,aes(x=mean,fill=BFlowerL)) + geom_boxplot()
ggplot(predhl,aes(y=mean,x=BFlowerL)) + geom_boxplot()
sampletraj
#sample trajectory for a given posterior using quantile or hdi interval
traj<-function(alpha,beta1,beta2,beta3,x,resources){
#fit regression for each input estimate
v=inv.logit(alpha + beta1 * x + beta2 * resources + beta3 * x*resources)
sampletraj<-data.frame(x=as.numeric(x),y=as.numeric(v))
#Compute CI intervals
return(sampletraj)
}
indat[indat$BAll_Flowers==1,"Traitmatch"]
length(indat[indat$BAll_Flowers==1,"Traitmatch"])
length(indat[indat$BAll_Flowers==0,"Traitmatch"])
castdf$beta3_mu
predH<-trajF(alpha=castdf$alpha_mu,beta1=castdf$beta1_mu,x=indat[indat$BAll_Flowers==1,"Traitmatch"],resources=indat[indat$ BAll_Flowers==1,"scaledR"],beta2=castdf$beta2_mu,beta3=castdf$beta3_mu)
predH
dim(predH)
predH
tail(predH)
alpha=castdf$alpha_mu
beta1=castdf$beta1_mu
x=indat[indat$BAll_Flowers==1,"Traitmatch"]
resources=indat[indat$ BAll_Flowers==1,"scaledR"]
beta2=castdf$beta2_mu
beta3=castdf$beta3_mu
beta3
v=inv.logit(alpha + beta1 * x + beta2 * resources + beta3 * x*resources)
x
x
v=inv.logit(alpha + beta1 * x + beta2 * resources + beta3 * x*resources)
x
v
v=inv.logit(alpha + beta1 * x + beta2 * resources + beta3 * x*resources)
v
alpha + beta1
beta2 * resources
c(3,4,5)*8
c(3,4,5)*c(8,6)
indat<-data.frame(alpha,beta1,beta2,beta3)
indat<-indat[1:10,]
indat %>% group_by(id)
indat$id<-1:nrow(indat)
indat %>% group_by(id)
indat %>% group_by(id) %>% do(traj(.$alpha,.$beta1,x,resources,.$beta2,.$beta3))
indat %>% group_by(id) %>% do(traj(.$alpha,.$beta1,x,resources,.$beta2,.$beta3)) %>% group_by(x) %>% summarize(mean=mean(y),lower=quantile(y,0.05),higher=quantile(y,0.95))
resources
x
sort(x))
sort(x)
load("Observed.RData")
load("ObservedModel.RData")
source('~/NetworkPredict/Bayesian/BayesFunctions.R', echo=TRUE)
indat<-data.frame(alpha,beta1,beta2,beta3)
#label rows
load("ObservedModel.RData")
gc()
gc()
gc()
load("ObservedModel.RData")
qplot(indat$Traitmatch,indat$BFlowerL)
ggplot(indat,aes(x=Traitmatch,y=indat$BFlowerL)) + geom_boxplot()
ggplot(indat,aes(y=Traitmatch,x=indat$BFlowerL)) + geom_boxplot()
source('~/NetworkPredict/Bayesian/BayesFunctions.R', echo=TRUE)
#Trajectories from posterior
predH<-trajF(alpha=castdf$alpha_mu,beta1=castdf$beta1_mu,x=indat[indat$BAll_Flowers==1,"Traitmatch"],resources=indat[indat$ BAll_Flowers==1,"scaledR"],beta2=castdf$beta2_mu,beta3=castdf$beta3_mu)
predL<-trajF(alpha=castdf$alpha_mu,beta1=castdf$beta1_mu,x=indat[indat$BAll_Flowers==0,"Traitmatch"],resources=indat[indat$ BAll_Flowers==0,"scaledR"],beta2=castdf$beta2_mu,beta3=castdf$beta3_mu)
predhl<-melt(list(High=predH,Low=predL),id.vars=colnames(predH))
colnames(predhl)[5]<-"BFlowerL"
indat$BFlowerL<-factor(as.character(indat$BAll_Flowers))
levels(indat$BFlowerL)<-c("Low","High")
ggplot(data=predhl,aes(x=x)) + geom_ribbon(aes(ymin=lower,ymax=upper,fill=BFlowerL),alpha=0.2)  + geom_line(aes(y=mean,col=BFlowerL),size=.8) + theme_bw() + ylab("Interactions") + xlab("Difference between Bill and Corolla Length") + geom_point(data=mindat,aes(x=Traitmatch,y=value))+ labs(fill="Resource Availability",col="Resource Availability")
ggsave("Figures/AllRegression.jpeg",height=5,width=7)
castdf<-dcast(pars_detect[pars_detect$par %in% c("beta1","beta2","beta3","alpha"),], species +Chain +Draw ~par ,value.var="estimate")
#Turn to
castdf$species<-factor(castdf$species,levels=1:max(as.numeric(castdf$species)))
species.split<-split(castdf,list(castdf$species),drop = T)
species.traj<-list()
for(d in 1:length(species.split)){
x<-species.split[[d]]
index<-unique(x$species)
#get data for those species
billd<-indat[indat$jBird %in% index,]
#scale resources
species.traj[[d]]<-trajF(alpha=x$alpha,beta1=x$beta1,beta2=x$beta2,beta3=x$beta3,resources=billd$scaledR,x=billd$Traitmatch)
}
castdf<-dcast(pars_detect[pars_detect$par %in% c("beta1","beta2","beta3","alpha"),], species +Chain +Draw ~par ,value.var="estimate")
#Turn to
castdf$species<-factor(castdf$species,levels=1:max(as.numeric(castdf$species)))
species.split<-split(castdf,list(castdf$species),drop = T)
species.traj<-list()
for(d in 1:length(species.split)){
x<-species.split[[d]]
index<-unique(x$species)
#get data for those species
billd<-indat[indat$jBird %in% index,]
sl<-trajF(alpha=x$alpha,beta1=x$beta1,beta2=x$beta2,beta3=x$beta3,resources=billd[billd$BAll_Flowers==0,"scaledR"],x=billd[billd$ BAll_Flowers==0,"Traitmatch"])
sh<-trajF(alpha=x$alpha,beta1=x$beta1,beta2=x$beta2,beta3=x$beta3,resources=billd[billd$BAll_Flowers==1,"scaledR"],x=billd[billd$ BAll_Flowers==1,"Traitmatch"])
sm<-melt(list(High=sh,Low=sl),id.vars=colnames(sl))
colnames(sm)[5]<-"Resources"
species.traj[[d]]<-sm
}
names(species.traj)<-names(species.split)
species.traj<-melt(species.traj,id.var=colnames(species.traj[[1]]))
#split out names and model
species.traj[,c("Index")]<-colsplit(species.traj$L1,"\\.",c("Index"))
spe<-merge(species.traj,jagsIndexBird,by.x="Index",by.y="jBird")
#plot and compare to original data
ggplot(data=spe,aes(x=x)) + geom_ribbon(aes(ymin=lower,ymax=upper,fill=Resources),alpha=0.2) + geom_line(aes(y=mean,col=Resources),size=.5) + theme_bw() + ylab("Occurrence Probability")+ xlab("Difference between Bill and Corolla Length") + facet_wrap(~Hummingbird,scales="free",ncol=3) + geom_point(data=mindat,aes(x=Traitmatch,y=value,shape=variable),size=1.5,alpha=.5)
ggsave("Figures/SpeciesRegression.jpeg",height=6,width=7)
source('~/NetworkPredict/Bayesian/BayesFunctions.R', echo=TRUE)
d=7
x<-species.split[[d]]
index<-unique(x$species)
index
billd<-indat[indat$jBird %in% index,]
billd
x<-species.split[[d]]
index<-unique(x$species)
#get data for those species
billd<-indat[indat$jBird %in% index,]
billd[billd$BAll_Flowers==0,"Traitmatch"]
billd[billd$BAll_Flowers==1,"Traitmatch"]
sl<-trajF(alpha=x$alpha,beta1=x$beta1,beta2=x$beta2,beta3=x$beta3,resources=billd[billd$BAll_Flowers==0,"scaledR"],x=billd[billd$BAll_Flowers==0,"Traitmatch"])
sl
tail(sl)
billd[billd$BAll_Flowers==0,"Traitmatch"]
sort(billd[billd$BAll_Flowers==0,"Traitmatch"])
billd[billd$BAll_Flowers==0,"Traitmatch"]
sl$x
source('~/NetworkPredict/Bayesian/BayesFunctions.R', echo=TRUE)
index<-unique(x$species)
#get data for those species
billd<-indat[indat$jBird %in% index,]
sl<-trajF(alpha=x$alpha,beta1=x$beta1,beta2=x$beta2,beta3=x$beta3,resources=billd[billd$BAll_Flowers==0,"scaledR"],trait=billd[billd$BAll_Flowers==0,"Traitmatch"])
sl$x
sl<-trajF(alpha=x$alpha,beta1=x$beta1,beta2=x$beta2,beta3=x$beta3,resources=billd[billd$BAll_Flowers==0,"scaledR"],trait=1:5)
sl<-trajF(alpha=x$alpha,beta1=x$beta1,beta2=x$beta2,beta3=x$beta3,resources=billd[billd$BAll_Flowers==0,"scaledR"],trait=billd[billd$BAll_Flowers==0,"Traitmatch"])
dim(sl)
length(billd[billd$BAll_Flowers==0,"Traitmatch")
length(billd[billd$BAll_Flowers==0,"Traitmatch"])
trajF
traj
source('~/NetworkPredict/Bayesian/BayesFunctions.R', echo=TRUE)
sl<-trajF(alpha=x$alpha,beta1=x$beta1,beta2=x$beta2,beta3=x$beta3,resources=billd[billd$BAll_Flowers==0,"scaledR"],trait=billd[billd$BAll_Flowers==0,"Traitmatch"])
sl<-trajF(alpha=x$alpha,beta1=x$beta1,beta2=x$beta2,beta3=x$beta3,resources=billd[billd$BAll_Flowers==0,"scaledR"],trait=billd[billd$BAll_Flowers==0,"Traitmatch"])
source('~/NetworkPredict/Bayesian/BayesFunctions.R', echo=TRUE)
sl<-trajF(alpha=x$alpha,beta1=x$beta1,beta2=x$beta2,beta3=x$beta3,resources=billd[billd$BAll_Flowers==0,"scaledR"],trait=billd[billd$BAll_Flowers==0,"Traitmatch"])
sl
dim(sl)
billd[billd$BAll_Flowers==0,"Traitmatch"]
trait=billd[billd$BAll_Flowers==0,"Traitmatch"]
billd[billd$BAll_Flowers==0,"scaledR"]
resources=billd[billd$BAll_Flowers==0,"scaledR"]
beta3=x$beta3
beta2=x$beta2
beta1=x$beta1
alpha=x$alpha
g<-data.frame(alpha,beta1,beta2,beta3)
#label rows
g$id<-1:nrow(g)
dim(g)
g %>% group_by(id)
g %>% group_by(id) %>% do(traj(.$alpha,.$beta1,trait=trait,resources,.$beta2,.$beta3))
a<-g %>% group_by(id) %>% do(traj(.$alpha,.$beta1,trait=trait,resources,.$beta2,.$beta3))
a$x
unique(a$x)
trait
unique(trait)
head(a)
sampletraj<-g %>% group_by(id) %>% do(traj(.$alpha,.$beta1,trait=trait,resources,.$beta2,.$beta3)) %>% group_by(x) %>% summarize(mean=mean(y),lower=quantile(y,0.05),higher=quantile(y,0.95))
sampletraj
sampletraj$x
trait
unqiue(trait)
unique(trait)
sort(unique(trait))
sort(unique(trait)) == sort(unique(sampletraj$x))
sl<-trajF(alpha=x$alpha,beta1=x$beta1,beta2=x$beta2,beta3=x$beta3,resources=billd[billd$BAll_Flowers==0,"scaledR"],trait=billd[billd$BAll_Flowers==0,"Traitmatch"])
sort(unique(trait)) == sort(unique(sl$x))
trajF
source('~/NetworkPredict/Bayesian/BayesFunctions.R', echo=TRUE)
newModel
gc()
library(reshape2)
library(foreach)
library(doSNOW)
library(chron)
library(ggplot2)
library(knitr)
library(R2jags)
library(dplyr)
library(stringr)
library(gridExtra)
library(boot)
library(picante)
library(bipartite)
opts_chunk$set(message=FALSE,warning=FALSE,fig.width=10,fig.height=7,echo=TRUE,cache=F,fig.align='center',fig.path="figureObserved/")
#new model update
newModel<-F
library(reshape2)
library(foreach)
library(doSNOW)
library(chron)
library(ggplot2)
library(knitr)
library(R2jags)
library(dplyr)
library(stringr)
library(gridExtra)
library(boot)
library(picante)
library(bipartite)
opts_chunk$set(message=FALSE,warning=FALSE,fig.width=10,fig.height=7,echo=TRUE,cache=F,fig.align='center',fig.path="figureObserved/")
#new model update
newModel<-F
library(reshape2)
library(foreach)
library(doSNOW)
library(chron)
library(ggplot2)
library(knitr)
library(R2jags)
library(dplyr)
library(stringr)
library(gridExtra)
library(boot)
library(picante)
library(bipartite)
opts_chunk$set(message=FALSE,warning=FALSE,fig.width=10,fig.height=7,echo=TRUE,cache=F,fig.align='center',fig.path="figureObserved/")
#new model update
newModel<-F
load("ObservedModel.RData")
predy<-trajF(alpha=castdf$alpha_mu,beta1=castdf$beta1_mu,x=indat$Traitmatch,resources=indat$scaledR,beta2=castdf$beta2_mu,beta3=castdf$beta3_mu)
castdf<-dcast(pars_detect[pars_detect$par %in% c("beta1_mu","beta2_mu","beta3_mu","alpha_mu"),], Chain + Draw~par,value.var="estimate")
predy<-trajF(alpha=castdf$alpha_mu,beta1=castdf$beta1_mu,x=indat$Traitmatch,resources=indat$scaledR,beta2=castdf$beta2_mu,beta3=castdf$beta3_mu)
ggplot(data=predy,aes(x=x)) + geom_ribbon(aes(ymin=lower,ymax=upper),alpha=0.4,fill="red")  +  theme_bw() + ylab("Interactions") + xlab("Difference between Bill and Corolla Length") + geom_point(data=indat,aes(x=Traitmatch,y=Camera)) + geom_line(aes(y=mean)) + geom_point(data=indat,aes(x=Traitmatch,y=Transect))
indat$Traitmatch
sort(indat$Traitmatch)
trajF
ftraj
traj
head(predy)
predy$x
trajF
indat$Traitmatch
head(predy)
alpha=castdf$alpha_mu
beta1=castdf$beta1_mu
x=indat$Traitmatch
resources=indat$scaledR
beta2=castdf$beta2_mu
beta3=castdf$beta3_mu
v=inv.logit(alpha + beta1 * x + beta2 * resources + beta3 * x*resources)
v
g<-data.frame(alpha,beta1,beta2,beta3)
#label rows
g$id<-1:nrow(g)
sampletraj<-g %>% group_by(id) %>% do(traj(.$alpha,.$beta1,x,resources,.$beta2,.$beta3)) %>% group_by(x) %>% summarize(mean=mean(y),lower=quantile(y,0.05),upper=quantile(y,0.95))
sampltraj
sampletraj
indat$Traitmatch
trajF
traj
g<-data.frame(alpha,beta1,beta2,beta3)
#label rows
g$id<-1:nrow(g)
g<-data.frame(alpha,beta1,beta2,beta3)
g %>% group_by(id) %>% do(traj(.$alpha,.$beta1,x,resources,.$beta2,.$beta3))
g$id<-1:nrow(g)
g %>% group_by(id) %>% do(traj(.$alpha,.$beta1,x,resources,.$beta2,.$beta3))
