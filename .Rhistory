obj.mode <- napply(names, mode)
obj.type <- ifelse(is.na(obj.class), obj.mode, obj.class)
obj.size <- napply(names, object.size)
obj.dim <- t(napply(names, function(x)
as.numeric(dim(x))[1:2]))
vec <- is.na(obj.dim)[, 1] & (obj.type != "function")
obj.dim[vec, 1] <- napply(names, length)[vec]
out <- data.frame(obj.type, obj.size, obj.dim)
names(out) <- c("Type", "Size", "Rows", "Columns")
if (!missing(order.by))
out <- out[order(out[[order.by]], decreasing=decreasing), ]
if (head)
out <- head(out, n)
out
}
# shorthand
lsos <- function(..., n=10) {
.ls.objects(..., order.by="Size", decreasing=TRUE, head=TRUE, n=n)
}
lsos()
## Credit: Taken from:  http://stackoverflow.com/questions/1358003/tricks-to-manage-the-available-memory-in-an-r-session
# improved list of objects
.ls.objects <- function (pos = 1, pattern, order.by,
decreasing=FALSE, head=FALSE, n=5) {
napply <- function(names, fn) sapply(names, function(x)
fn(get(x, pos = pos)))
names <- ls(pos = pos, pattern = pattern)
obj.class <- napply(names, function(x) as.character(class(x))[1])
obj.mode <- napply(names, mode)
obj.type <- ifelse(is.na(obj.class), obj.mode, obj.class)
obj.prettysize <- napply(names, function(x) {
capture.output(print(object.size(x), units = "auto")) })
obj.size <- napply(names, object.size)
obj.dim <- t(napply(names, function(x)
as.numeric(dim(x))[1:2]))
vec <- is.na(obj.dim)[, 1] & (obj.type != "function")
obj.dim[vec, 1] <- napply(names, length)[vec]
out <- data.frame(obj.type, obj.size, obj.prettysize, obj.dim)
names(out) <- c("Type", "Size", "PrettySize", "Rows", "Columns")
if (!missing(order.by))
out <- out[order(out[[order.by]], decreasing=decreasing), ]
if (head)
out <- head(out, n)
out
}
# shorthand
lsos <- function(..., n=10) {
.ls.objects(..., order.by="Size", decreasing=TRUE, head=TRUE, n=n)
}
lsos()
trajF
alpha=castdf$alpha_mu
beta1=castdf$beta1_mu
x=indat$Traitmatch
resources=indat$scaledR
beta2=castdf$beta2_mu
beta3=castdf$beta3_mu
predy<-trajF(alpha=castdf$alpha_mu,beta1=castdf$beta1_mu,x=indat$Traitmatch,resources=indat$scaledR,beta2=castdf$beta2_mu,beta3=castdf$beta3_mu)
alpha
castdf<-dcast(pars_detect[pars_detect$par %in% c("beta1_mu","beta2_mu","beta3_mu","alpha_mu"),], Chain + Draw~par,value.var="estimate")
alpha=castdf$alpha_mu
beta1=castdf$beta1_mu
x=indat$Traitmatch
resources=indat$scaledR
beta2=castdf$beta2_mu
beta3=castdf$beta3_mu
indat<-data.frame(alpha,beta1,beta2,beta3)
head(indat)
indat<-list(alpha,beta1,beta2,beta3)
inp<-list(alpha,beta1,beta2,beta3)
sapply(inp,function(x){
data.frame(mean(x))
})
data.frame(mean=mean(x),lower=quantile(x,0.5),upper=quantile(0.95))
sapply(inp,function(x){
data.frame(mean=mean(x),lower=quantile(x,0.5),upper=quantile(x,0.95))
})
lapply(inp,function(x){
data.frame(mean=mean(x),lower=quantile(x,0.5),upper=quantile(x,0.95))
})
inp<-lapply(inp,function(x){
data.frame(mean=mean(x),lower=quantile(x,0.5),upper=quantile(x,0.95))
})
names(inp)<-c("alpha","beta1","beta2","beta3")
inp<-melt(inp,id.vars=colnames(inp[[1]]))
head(inp)
sampletraj<-list()
melt(inp)
inp<-list(alpha,beta1,beta2,beta3)
inp<-lapply(inp,function(x){
data.frame(mean=mean(x),lower=quantile(x,0.5),upper=quantile(x,0.95))
})
inp
inp<-melt(inp,id.vars=colnames(inp[[1]]))
inp
inp<-list(alpha,beta1,beta2,beta3)
inp<-lapply(inp,function(x){
data.frame(mean=mean(x),lower=quantile(x,0.5),upper=quantile(x,0.95))
})
names(inp)<-c("alpha","beta1","beta2","beta3")
inp<-melt(inp,id.vars=colnames(inp[[1]]))
inp
dcast(inp,...~L1)
dcast(inp)
inp
t(inp)
inp
inp<-list(alpha,beta1,beta2,beta3)
inp
inp<-list(alpha,beta1,beta2,beta3)
inp<-lapply(inp,function(x){
data.frame(mean=mean(x),lower=quantile(x,0.5),upper=quantile(x,0.95))
})
inp<-sapply(inp,function(x){
data.frame(mean=mean(x),lower=quantile(x,0.5),upper=quantile(x,0.95))
})
inp<-list(alpha,beta1,beta2,beta3)
inp<-list(alpha,beta1,beta2,beta3)
names(inp)<-c("alpha","beta1","beta2","beta3")
inp<-sapply(inp,function(x){
data.frame(mean=mean(x),lower=quantile(x,0.5),upper=quantile(x,0.95))
})
inp
y=1
v=inv.logit(inp$alpha[y] + inp$beta1[y] * x + inp$beta2[y] * resources + indat$beta3[y] * x*resources)
y
for (y in 1:nrow(inp)){
v=inv.logit(inp$alpha[y] + inp$beta1[y] * x + inp$beta2[y] * resources + indat$beta3[y] * x*resources)
sampletraj[[y]]<-data.frame(x=as.numeric(x),y=as.numeric(v))
}
inp<-list(alpha,beta1,beta2,beta3)
names(inp)<-c("alpha","beta1","beta2","beta3")
inp<-sapply(inp,function(x){
data.frame(mean=mean(x),lower=quantile(x,0.5),upper=quantile(x,0.95))
})
#fit regression for each input estimate
sampletraj<-list()
for (y in 1:nrow(inp)){
v=inv.logit(inp$alpha[y] + inp$beta1[y] * x + inp$beta2[y] * resources + indat$beta3[y] * x*resources)
sampletraj[[y]]<-data.frame(x=as.numeric(x),y=as.numeric(v))
}
sample_all<-rbind_all(sampletraj)
inp<-list(alpha,beta1,beta2,beta3)
names(inp)<-c("alpha","beta1","beta2","beta3")
inp<-sapply(inp,function(x){
data.frame(mean=mean(x),lower=quantile(x,0.5),upper=quantile(x,0.95))
})
inp
sampletraj<-list()
nrow(inp)
for (y in 1:nrow(inp)){
v=inv.logit(inp$alpha[y] + inp$beta1[y] * x + inp$beta2[y] * resources + indat$beta3[y] * x*resources)
sampletraj[[y]]<-data.frame(x=as.numeric(x),y=as.numeric(v))
}
y
v=inv.logit(inp$alpha[y] + inp$beta1[y] * x + inp$beta2[y] * resources + indat$beta3[y] * x*resources)
sampletraj[[y]]<-data.frame(x=as.numeric(x),y=as.numeric(v))
as.numeric(x)
as.numeric(v)
v=inv.logit(inp$alpha[y] + inp$beta1[y] * x + inp$beta2[y] * resources + indat$beta3[y] * x*resources)
v
resources
indat$beta3[y] * x*resources
x
indat$beta3[y]
inp<-list(alpha,beta1,beta2,beta3)
inp<-sapply(inp,function(x){
names(inp)<-c("alpha","beta1","beta2","beta3")
})
data.frame(mean=mean(x),lower=quantile(x,0.5),upper=quantile(x,0.95))
#fit regression for each input estimate
sampletraj<-list()
for (y in 1:nrow(inp)){
v=inv.logit(inp$alpha[y] + inp$beta1[y] * x + inp$beta2[y] * resources + inp$beta3[y] * x*resources)
sampletraj[[y]]<-data.frame(x=as.numeric(x),y=as.numeric(v))
}
inp
inp<-list(alpha,beta1,beta2,beta3)
names(inp)<-c("alpha","beta1","beta2","beta3")
inp<-sapply(inp,function(x){
data.frame(mean=mean(x),lower=quantile(x,0.5),upper=quantile(x,0.95))
})
inp
sampletraj<-list()
for (y in 1:nrow(inp)){
v=inv.logit(inp$alpha[y] + inp$beta1[y] * x + inp$beta2[y] * resources + inp$beta3[y] * x*resources)
sampletraj[[y]]<-data.frame(x=as.numeric(x),y=as.numeric(v))
}
inp<-list(alpha,beta1,beta2,beta3)
names(inp)<-c("alpha","beta1","beta2","beta3")
inp<-sapply(inp,function(x){
data.frame(mean=mean(x),lower=quantile(x,0.5),upper=quantile(x,0.95))
})
inp
inp<-list(alpha,beta1,beta2,beta3)
names(inp)<-c("alpha","beta1","beta2","beta3")
data.frame(mean=mean(x),lower=quantile(x,0.5),upper=quantile(x,0.95))
inp<-sapply(inp,function(x){
})
inp
inp<-list(alpha,beta1,beta2,beta3)
inp<-sapply(inp,function(x){
names(inp)<-c("alpha","beta1","beta2","beta3")
data.frame(mean=mean(x),lower=quantile(x,0.5),upper=quantile(x,0.95))
})
inp
trajF<-function(alpha,beta1,beta2,beta3,x,resources){
inp<-list(alpha,beta1,beta2,beta3)
inp<-list(alpha,beta1,beta2,beta3)
names(inp)<-c("alpha","beta1","beta2","beta3")
inp<-sapply(inp,function(x){
data.frame(mean=mean(x),lower=quantile(x,0.5),upper=quantile(x,0.95))
})
sampletraj<-list()
inp
sampletraj<-list()
for (y in 1:nrow(inp)){
v=inv.logit(inp$alpha[y] + inp$beta1[y] * x + inp$beta2[y] * resources + inp$beta3[y] * x*resources)
sampletraj[[y]]<-data.frame(x=as.numeric(x),y=as.numeric(v))
}
inp
inp$alpha[y]
y
inp$alpha[y]
as.data.frame(inp)
as.data.frame(inp)$alpha
}))
inp<-list(alpha,beta1,beta2,beta3)
names(inp)<-c("alpha","beta1","beta2","beta3")
inp<-data.frame(sapply(inp,function(x){
data.frame(mean=mean(x),lower=quantile(x,0.5),upper=quantile(x,0.95))
}))
inp
inp$alpha
inp$alpha[1]
for (y in 1:nrow(inp)){
v=inv.logit(inp$alpha[y] + inp$beta1[y] * x + inp$beta2[y] * resources + inp$beta3[y] * x*resources)
sampletraj[[y]]<-data.frame(x=as.numeric(x),y=as.numeric(v))
}
inp
inp$beta1
v=inv.logit(inp$alpha[y] + inp$beta1[y] * x + inp$beta2[y] * resources + inp$beta3[y] * x*resources)
inp$beta1
inp$beta2
inp$beta3
v=inv.logit(inp$alpha[y] + inp$beta1[y] * x + inp$beta2[y] * resources + inp$beta3[y] * x*resources)
x
inp$beta1[y]
inp$beta1[[y]]
inp<-list(alpha,beta1,beta2,beta3)
names(inp)<-c("alpha","beta1","beta2","beta3")
inp<-data.frame(sapply(inp,function(x){
data.frame(mean=mean(x),lower=quantile(x,0.5),upper=quantile(x,0.95))
}))
#fit regression for each input estimate
sampletraj<-list()
for (y in 1:nrow(inp)){
v=inv.logit(inp$alpha[[y]] + inp$beta1[[y]] * x + inp$beta2[[y]] * resources + inp$beta3[[y]] * x*resources)
sampletraj[[y]]<-data.frame(x=as.numeric(x),y=as.numeric(v))
}
sample_all<-rbind_all(sampletraj)
sample_all
inp<-list(alpha,beta1,beta2,beta3)
names(inp)<-c("alpha","beta1","beta2","beta3")
data.frame(mean=mean(x),lower=quantile(x,0.5),upper=quantile(x,0.95))
inp<-data.frame(sapply(inp,function(x){
}))
#fit regression for each input estimate
sampletraj<-list()
inp
inp<-list(alpha,beta1,beta2,beta3)
names(inp)<-c("alpha","beta1","beta2","beta3")
data.frame(mean=mean(x),lower=quantile(x,0.5),upper=quantile(x,0.95))
inp<-data.frame(sapply(inp,function(x){
inp<-list(alpha,beta1,beta2,beta3)
names(inp)<-c("alpha","beta1","beta2","beta3")
inp<-data.frame(sapply(inp,function(x){
data.frame(mean=mean(x),lower=quantile(x,0.5),upper=quantile(x,0.95))
}))
inp
inp<-list(alpha,beta1,beta2,beta3)
names(inp)<-c("alpha","beta1","beta2","beta3")
data.frame(mean=mean(x),lower=quantile(x,0.5),upper=quantile(x,0.95))
inp<-data.frame(sapply(inp,function(x){
}))
#fit regression for each input estimate
sampletraj<-list()
for (y in 1:nrow(inp)){
v=inv.logit(inp$alpha[[y]] + inp$beta1[[y]] * x + inp$beta2[[y]] * resources + inp$beta3[[y]] * x*resources)
sampletraj[[y]]<-data.frame(x=as.numeric(x),y=as.numeric(v),r=rownames(inp)[y])
}
sample_all<-rbind_all(sampletraj)
rownames(inp)
inp
inp<-list(alpha,beta1,beta2,beta3)
names(inp)<-c("alpha","beta1","beta2","beta3")
inp<-data.frame(sapply(inp,function(x){
data.frame(mean=mean(x),lower=quantile(x,0.5),upper=quantile(x,0.95))
}))
inp
rownames(inp)
#fit regression for each input estimate
sampletraj<-list()
for (y in 1:nrow(inp)){
v=inv.logit(inp$alpha[[y]] + inp$beta1[[y]] * x + inp$beta2[[y]] * resources + inp$beta3[[y]] * x*resources)
sampletraj[[y]]<-data.frame(x=as.numeric(x),y=as.numeric(v),r=rownames(inp)[y])
}
sample_all<-rbind_all(sampletraj)
sample_all
indat<-data.frame(alpha,beta1,beta2,beta3)
#fit regression for each input estimate
sampletraj<-list()
for (y in 1:nrow(indat)){
v=inv.logit(indat$alpha[y] + indat$beta1[y] * x + indat$beta2[y] * resources + indat$beta3[y] * x*resources)
sampletraj[[y]]<-data.frame(x=as.numeric(x),y=as.numeric(v))
}
sample_all<-rbind_all(sampletraj)
sample_all
predy<-group_by(sample_all,x) %>% summarise(lower=quantile(y,0.025,na.rm=T),upper=quantile(y,0.975,na.rm=T),mean=mean(y,na.rm=T))
predy
inp<-list(alpha,beta1,beta2,beta3)
names(inp)<-c("alpha","beta1","beta2","beta3")
inp<-data.frame(sapply(inp,function(x){
data.frame(mean=mean(x),lower=quantile(x,0.5),upper=quantile(x,0.95))
}))
#fit regression for each input estimate
sampletraj<-list()
for (y in 1:nrow(inp)){
v=inv.logit(inp$alpha[[y]] + inp$beta1[[y]] * x + inp$beta2[[y]] * resources + inp$beta3[[y]] * x*resources)
sampletraj[[y]]<-data.frame(x=as.numeric(x),y=as.numeric(v),r=rownames(inp)[y])
}
sample_all<-rbind_all(sampletraj)
sample_all
dcast(sample_all,x~r)
#fit regression for each input estimate
sampletraj<-list()
for (y in 1:nrow(indat)){
v=inv.logit(indat$alpha[y] + indat$beta1[y] * x + indat$beta2[y] * resources + indat$beta3[y] * x*resources)
sampletraj[[y]]<-data.frame(x=as.numeric(x),y=as.numeric(v))
}
sample_all<-rbind_all(sampletraj)
#Compute CI intervals
predy<-group_by(sample_all,x) %>% summarise(lower=quantile(y,0.025,na.rm=T),upper=quantile(y,0.975,na.rm=T),mean=mean(y,na.rm=T))
predy
inp<-list(alpha,beta1,beta2,beta3)
names(inp)<-c("alpha","beta1","beta2","beta3")
inp<-data.frame(sapply(inp,function(x){
data.frame(mean=mean(x),lower=quantile(x,0.5),upper=quantile(x,0.95))
}))
#fit regression for each input estimate
sampletraj<-list()
for (y in 1:nrow(inp)){
v=inv.logit(inp$alpha[[y]] + inp$beta1[[y]] * x + inp$beta2[[y]] * resources + inp$beta3[[y]] * x*resources)
sampletraj[[y]]<-data.frame(x=as.numeric(x),y=as.numeric(v),r=rownames(inp)[y])
}
sample_all<-rbind_all(sampletraj)
sample_all
sampletraj
sample_all<-rbind_all(sampletraj)
head(pprecip)
predy
sample_all
dcast(sample_all,x~r)
v=inv.logit(inp$alpha[[y]] + inp$beta1[[y]] * x + inp$beta2[[y]] * resources + inp$beta3[[y]] * x*resources)
v
sampletraj[[y]]<-data.frame(x=as.numeric(x),y=as.numeric(v),r=rownames(inp)[y])
inp<-list(alpha,beta1,beta2,beta3)
names(inp)<-c("alpha","beta1","beta2","beta3")
inp<-data.frame(sapply(inp,function(x){
data.frame(mean=mean(x),lower=quantile(x,0.5),upper=quantile(x,0.95))
}))
#fit regression for each input estimate
sampletraj<-list()
for (y in 1:nrow(inp)){
v=inv.logit(inp$alpha[[y]] + inp$beta1[[y]] * x + inp$beta2[[y]] * resources + inp$beta3[[y]] * x*resources)
sampletraj[[y]]<-data.frame(x=as.numeric(x),y=as.numeric(v),r=rownames(inp)[y])
}
sample_all<-rbind_all(sampletraj)
sample_all
dcast(sample_all,x~r)
ggplot(sample_all) + geom_line(aes(x=x,y=y,col=r))
ggplot(sample_all) + geom_ribbon(aes(x=x,y=y,col=r))
inp<-list(alpha,beta1,beta2,beta3)
names(inp)<-c("alpha","beta1","beta2","beta3")
inp<-data.frame(sapply(inp,function(x){
data.frame(mean=mean(x),lower=quantile(x,0.5),upper=quantile(x,0.95))
}))
#fit regression for each input estimate
sampletraj<-list()
for (y in 1:nrow(inp)){
v=inv.logit(inp$alpha[[y]] + inp$beta1[[y]] * x + inp$beta2[[y]] * resources + inp$beta3[[y]] * x*resources)
sampletraj[[y]]<-data.frame(x=as.numeric(x),y=as.numeric(v),r=rownames(inp)[y])
}
sampletraj
inp<-list(alpha,beta1,beta2,beta3)
names(inp)<-c("alpha","beta1","beta2","beta3")
inp<-data.frame(sapply(inp,function(x){
data.frame(mean=mean(x),lower=quantile(x,0.5),upper=quantile(x,0.95))
}))
#fit regression for each input estimate
sampletraj<-list()
for (y in 1:nrow(inp)){
v=inv.logit(inp$alpha[[y]] + inp$beta1[[y]] * x + inp$beta2[[y]] * resources + inp$beta3[[y]] * x*resources)
sampletraj[[y]]<-data.frame(x=as.numeric(x),y=as.numeric(v),r=rownames(inp)[y])
}
inp
dcast(sample_all,x~r)
dcast(sample_all,x~r,mean)
}predy
predy
inp<-list(alpha,beta1,beta2,beta3)
names(inp)<-c("alpha","beta1","beta2","beta3")
inp<-data.frame(sapply(inp,function(x){
data.frame(mean=mean(x),lower=quantile(x,0.5),upper=quantile(x,0.95))
}))
#fit regression for each input estimate
sampletraj<-list()
for (y in 1:nrow(inp)){
v=inv.logit(inp$alpha[[y]] + inp$beta1[[y]] * x + inp$beta2[[y]] * resources + inp$beta3[[y]] * x*resources)
sampletraj[[y]]<-data.frame(x=as.numeric(x),y=as.numeric(v))
}
sampletraj
inp<-list(alpha,beta1,beta2,beta3)
names(inp)<-c("alpha","beta1","beta2","beta3")
inp<-data.frame(sapply(inp,function(x){
data.frame(mean=mean(x),lower=quantile(x,0.5),upper=quantile(x,0.95))
}))
#fit regression for each input estimate
sampletraj<-list()
for (y in 1:nrow(inp)){
v=inv.logit(inp$alpha[[y]] + inp$beta1[[y]] * x + inp$beta2[[y]] * resources + inp$beta3[[y]] * x*resources)
sampletraj[[y]]<-as.numeric(v)
}
sampletraj
melt(sampletraj)
inp
names(sampletraj)<-rownames(inp)
sampletraj
melt(sampletraj)
inp<-list(alpha,beta1,beta2,beta3)
names(inp)<-c("alpha","beta1","beta2","beta3")
inp<-data.frame(sapply(inp,function(x){
data.frame(mean=mean(x),lower=quantile(x,0.5),upper=quantile(x,0.95))
}))
#fit regression for each input estimate
sampletraj<-list()
for (y in 1:nrow(inp)){
v=inv.logit(inp$alpha[[y]] + inp$beta1[[y]] * x + inp$beta2[[y]] * resources + inp$beta3[[y]] * x*resources)
sampletraj[[y]]<-data.frame(x=x,y=as.numeric(v))
}
names(sampletraj)<-rownames(inp)
sampletraj
melt(sampletraj)
sample_all<-melt(sampletraj,id.var="x")
sample_all
head(sample_all)
dcast(sample_all,x~L1)
indat<-data.frame(alpha,beta1,beta2,beta3)
#fit regression for each input estimate
sampletraj<-list()
for (y in 1:nrow(indat)){
v=inv.logit(indat$alpha[y] + indat$beta1[y] * x + indat$beta2[y] * resources + indat$beta3[y] * x*resources)
sampletraj[[y]]<-data.frame(x=as.numeric(x),y=as.numeric(v))
}
sample_all<-rbind_all(sampletraj)
sample_all
predy<-group_by(sample_all,x) %>% summarise(lower=quantile(y,0.025,na.rm=T),upper=quantile(y,0.975,na.rm=T),mean=mean(y,na.rm=T))
predy
lsos()
lapply(species.traj,nrow)
species.traj
trajF(alpha=x$alpha,beta1=x$beta1,beta2=x$beta2,beta3=x$beta3,resources=billd$scaledR,x=billd$Traitmatch)
castdf<-dcast(pars_detect[pars_detect$par %in% c("beta1","beta2","beta3","alpha"),], species +Chain +Draw ~par ,value.var="estimate")
#Turn to
castdf$species<-factor(castdf$species,levels=1:max(as.numeric(castdf$species)))
species.split<-split(castdf,list(castdf$species),drop = T)
species.traj<-list()
for(d in 1:length(species.split)){
x<-species.split[[d]]
index<-unique(x$species)
#get data for those species
billd<-indat[indat$jBird %in% index,]
#scale resources
species.traj[[d]]<-trajF(alpha=x$alpha,beta1=x$beta1,beta2=x$beta2,beta3=x$beta3,resources=billd$scaledR,x=billd$Traitmatch)
}
names(species.traj)<-names(species.split)
species.traj<-melt(species.traj,id.var=colnames(species.traj[[1]]))
#split out names and model
species.traj[,c("Index")]<-colsplit(species.traj$L1,"\\.",c("Index"))
spe<-merge(species.traj,jagsIndexBird,by.x="Index",by.y="jBird")
indat<-data.frame(alpha,beta1,beta2,beta3)
#fit regression for each input estimate
sampletraj<-list()
for (y in 1:nrow(indat)){
v=inv.logit(indat$alpha[y] + indat$beta1[y] * x + indat$beta2[y] * resources + indat$beta3[y] * x*resources)
sampletraj[[y]]<-data.frame(x=as.numeric(x),y=as.numeric(v))
}
sample_all<-rbind_all(sampletraj)
y
v=inv.logit(indat$alpha[y] + indat$beta1[y] * x + indat$beta2[y] * resources + indat$beta3[y] * x*resources)
resources
x
dim(species.traj)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
dim(castdf)
head(castdf)
range(castdf$Draw)
nrow(castdf)
tail(castdf)
source('~/.active-rstudio-document', echo=TRUE)
save.image("ObservedModel.RData")
