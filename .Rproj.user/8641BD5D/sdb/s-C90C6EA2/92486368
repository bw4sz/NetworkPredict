{
    "contents" : "---\ntitle: \"Trait-matching and Available Resources\"\nauthor: \"Ben Weinstein - Stony Brook University\"\noutput:\n  html_document:\n    toc: true\n    number_sections: true\n    theme: spacelab\n    keep_md: true\n  word_document: default\n---\n\n```{r,warning=FALSE,message=FALSE,echo=FALSE,cache=FALSE}\nlibrary(reshape2)\nlibrary(foreach)\nlibrary(doSNOW)\nlibrary(chron)\nlibrary(ggplot2)\nlibrary(knitr)\nlibrary(R2jags)\nlibrary(dplyr)\nlibrary(stringr)\nlibrary(gridExtra)\nlibrary(boot)\nlibrary(picante)\nlibrary(bipartite)\nlibrary(VennDiagram)\n\nopts_chunk$set(message=FALSE,warning=FALSE,fig.width=10,fig.height=7,echo=TRUE,cache=F,fig.align='center',fig.path=\"figureObserved/\")\n\nset.seed(3)\n```\n\n```{r,echo=F,cache=FALSE}\npaste(\"Run Completed at\",Sys.time())\n```\n\n```{r}\n#reload if needed\n#load(\"Observed.Rdata\")\n```\n\n#Load in data\n\n```{r}\n#read in flower morphology data, comes from Nectar.R\ndroppath<-\"C:/Users/Ben/Dropbox/\"\nfl.morph<-read.csv(paste(droppath,\"Thesis/Maquipucuna_SantaLucia/Results/FlowerMorphology.csv\",sep=\"\"))\n\n#First row is empty\nfl.morph<-fl.morph[-1,]\n\n#Bring in Hummingbird Morphology Dataset, comes from\nhum.morph<-read.csv(paste(droppath,\"Thesis/Maquipucuna_SantaLucia/Results/HummingbirdMorphology.csv\",sep=\"\"))\n\n#taxonomy change, we are calling them Crowned Woodnymph's now.\nhum.morph$English<-as.character(hum.morph$English)\n\nhum.morph$English[hum.morph$English %in% \"Green-crowned Woodnymph\"]<-\"Crowned Woodnymph\"\n\n#Bring in Interaction Matrix\nint<-read.csv(paste(droppath,\"Thesis/Maquipucuna_SantaLucia/Results/Network/HummingbirdInteractions.csv\",sep=\"\"),row.names=1)\n\n#one date error\nint[int$DateP %in% '2013-07-25',\"Month\"]<-7\n\n#one duplicate camera error, perhaps two GPS records.\nint<-int[!(int$ID %in% \"FH1108\" & int$Date_F %in% '2014-12-01'),]\n\n#Correct known taxonomic disagreements, atleast compared to traits\nint[int$Iplant_Double==\"Alloplectus purpureus\",\"Iplant_Double\"]<-\"Glossoloma purpureum\"\nint[int$Iplant_Double==\"Capanea affinis\",\"Iplant_Double\"]<-\"Kohleria affinis\"\nint[int$Iplant_Double==\"Columnea cinerea\",\"Iplant_Double\"]<-\"Columnea mastersonii\"\nint[int$Iplant_Double==\"Alloplectus teuscheri\",\"Iplant_Double\"]<-\"Drymonia teuscheri\"\nint[int$Iplant_Double==\"Drymonia collegarum\",\"Iplant_Double\"]<-\"Alloplectus tetragonoides\"\n\n#Some reasonable level of presences, 25 points\nkeep<-names(which(table(int$Hummingbird) > 10))\n\nint<-int[int$Hummingbird %in% keep & !int$Hummingbird %in% c(\"Sparkling Violetear\"),]\n\nm.dat<-droplevels(int[colnames(int) %in% c(\"ID\",\"Video\",\"Time\",\"Hummingbird\",\"Sex\",\"TransectID\",\"Transect_R\",\"Iplant_Double\",\"Pierce\",\"DateP\",\"Month\",\"ele\",\"Type\")])\n\n#Does the data come from camera or transect?\nm.dat$Type<-(is.na(m.dat$TransectID))*1\n\nm.dat$Year<-years(as.Date(m.dat$DateP))\n#one missing date\nm.dat$Year[m.dat$Year %in% 2012]<-2013\n\n#Number of bird species\nh_species<-nlevels(m.dat$Hummingbird)\n\n#Number of plant species\nplant_species<-nlevels(m.dat$Iplant_Double)\n\n#Get english name\ndath<-merge(m.dat,hum.morph, by.x=\"Hummingbird\",by.y=\"English\",keep=all)\n\n#Merge to flowers\nint.FLlevels<-levels(factor(dath$Iplant_Double))\n\n#Which flowers are we missing info for?\nmissingTraits<-int.FLlevels[!int.FLlevels %in% fl.morph$X]\n\n#print(paste(\"Missing Trait Information:\",missingTraits))\ndath<-merge(dath,fl.morph, by.x=\"Iplant_Double\",by.y=\"X\")\n\n#Drop piercing events, since they don't represent correlation\n#dath<-dath[!dath$Pierce %in% c(\"y\",\"Y\"),]\n```\n\n##Match Species to Morphology\n\n```{r}\n#observed traitmatching\ntraitmatchF<-abs(t(sapply(hum.morph$Bill,function(x){x-fl.morph$TotalCorolla})))\nrownames(traitmatchF)<-hum.morph$English\ncolnames(traitmatchF)<-fl.morph$Group.1\n```\n\n```{r}\n#match names #Round to 2 decimals #Convert to cm for winbugs, avoids numerical underflow\ntraitmatchT<-round(traitmatchF[rownames(traitmatchF) %in% dath$Hummingbird,colnames(traitmatchF) %in% dath$Iplant_Double],2)\ntraitmatchT<-traitmatchT[sort(rownames(traitmatchT)),sort(colnames(traitmatchT))]\n```\n\n##Elevation ranges\n\nCreate a binary variable whether each observation was in a low elevation or high elevation transect. We have some species that just occur at the top of the gradient, and are not present in the sampling window of flowers at the low elevation.\n\nAccounting for non-availability.\nWe have to figure out which plants were sampled in which periods, and if it was sampled, the non-detection are 0 if it wasn't the non-detection are NA. then remove all the Na's.\n\n```{r}\nelevH<-read.csv(\"InputData/HummingbirdElevation.csv\",row.names=1)\nhead(elevH)\ncolnames(elevH)[5]<-\"Elevation\"\nelevH$Bird<-1:nrow(elevH)\n\n#high elevation or low elevation\nelevP<-read.csv(\"InputData/PlantElevation.csv\",row.names=1)\ncolnames(elevP)[5]<-\"Elevation\"\nelevP$Plant<-1:nrow(elevP)\nelevP$Iplant_Double<-as.character(elevP$Iplant_Double)\n\n#Correct known taxonomic errors\nelevP[elevP$Iplant_Double %in% \"Alloplectus purpureus\",\"Iplant_Double\"]<-\"Glossoloma purpureum\"\nelevP[elevP$Iplant_Double %in% \"Capanea affinis\",\"Iplant_Double\"]<-\"Kohleria affinis\"\nelevP[elevP$Iplant_Double %in% \"Alloplectus teuscheri\",\"Iplant_Double\"]<-\"Drymonia teuscheri\"\nelevP[elevP$Iplant_Double %in% \"Columnea cinerea\",\"Iplant_Double\"]<-\"Columnea mastersonii\"\nelevP[elevP$Iplant_Double %in% \"Alloplectus tenuis\",\"Iplant_Double\"]<-\"Drymonia tenuis\"\n\n#Merge to observed Data\n#plants\ndathp<-merge(dath,elevP,by=\"Iplant_Double\")\n\n#birds\ndatph<-merge(dathp,elevH,by=\"Hummingbird\")\n```\n\nWhat elevation transect is each observation in?\nThe camera data need to be inferred from the GPS point.\n\n```{r}\n#cut working best on data.frame\ndatph<-as.data.frame(datph)\n\n#which elevation bin is each observation within\nlabs<-paste(seq(1300,2500,200),seq(1500,2700,200),sep=\"_\")\n\n#for the couple points that have 1290 elevation, round up to 300 for convienance\ndatph$ele[datph$ele < 1300]<-1301\ndatph$Transect_R[is.na(datph$Transect_R)]<-as.character(cut(datph[is.na(datph$Transect_R),]$ele,seq(1300,2700,200),labels=labs))\n\n#Elev for the transects is the midpoint\ntran_elev<-datph[datph$Survey_Type=='Transect',\"Transect_R\"]\ndatph[datph$Survey_Type=='Transect',\"ele\"]<-sapply(tran_elev,function(x){\n  mean(as.numeric(str_split(x,\"_\")[[1]]))\n})\n```\n\n### Define Time Events\n\n```{r}\n#ID for NA is holger transects, make the id's 1:n for each day of transect at each elevation, assuming no elevation was split across days.\ndatph$ID<-as.character(datph$ID)\nnoid<-datph[is.na(datph$ID),]\n\nid_topaste<-paste(noid$Month,noid$Year,\"Transect\",sep=\"_\")\ndatph[which(is.na(datph$ID)),\"ID\"]<-id_topaste\n\n#Create year month combination\ndatph$Time<-paste(datph$Month,datph$Year,sep=\"_\")\n\n#Label survey type\ndatph$Survey_Type<-NA\n\nmt<-!is.na(datph$TransectID)*1\ndatph$Survey_Type[mt==1]<-\"Transect\"\ndatph$Survey_Type[!datph$Survey_Type %in% \"Transect\"]<-\"Camera\"\n\n#Day level\n#add day ID\nsdat<-split(datph,list(datph$ID),drop = T)\n\nsdat<-lapply(sdat,function(x){\n  x<-droplevels(x)\n  x$Day<-as.numeric(as.factor(x$DateP))\n  return(x)\n})\n\nindatraw<-rbind_all(sdat)\n\n#Species names\nfor (x in 1:nrow(indatraw)){\n  indatraw$Hummingbird[x]<-as.character(elevH[elevH$Bird %in% indatraw$Bird[x],\"Hummingbird\"])\n  indatraw$Iplant_Double[x]<-as.character(elevP[elevP$Plant %in% indatraw$Plant[x],\"Iplant_Double\"])\n}\n\n#match the traits\ntraitmelt<-melt(traitmatchT)\ncolnames(traitmelt)<-c(\"Hummingbird\",\"Iplant_Double\",\"Traitmatch\")\n#dummy presence variable\nindatraw$Yobs<-1\n\n#prune columsn to make more readable\nindatraw<-indatraw[,c(\"Hummingbird\",\"Iplant_Double\",\"ID\",\"Time\",\"Month\",\"Year\",\"Transect_R\",\"ele\",\"DateP\",\"Yobs\",\"Day\",\"Survey_Type\",\"Pierce\")]\n```\n\n##Absences - accounting for non-detection\n\nWe have more information than just the presences, given species elevation ranges, we have absences as well. Absences are birds that occur at the elevation of the plant sample, but were not recorded feeding on the flower.\n\n```{r}\n#Only non-detections are real 0's, the rest are NA's and are removed.\n#Plants not surveyed in that time period\n#Hummingbirds not present at that elevation\n\n#For each ID\nTime<-unique(indatraw$Time)\n\n#absences data frame\nabsences<-list()\n\nfor(t in Time){\n  ID<-unlist(unique(indatraw[indatraw$Time ==t,\"ID\"]))\n\n  for (j in ID){\n  #Which plants were sampled\n  a<-indatraw %>% filter(Time==t,ID==j)\n  \n  #For each sampled transect\n  trans<-unique(a$Transect_R)\n  \n  if(!length(trans)==0){\n    for(transect in trans){\n\n    #for each date \n    datecam<-a %>% filter(Transect_R %in% transect) %>% distinct(DateP) %>% .$DateP\n    }} else{\n      datecam<-a %>% distinct(DateP) %>% .$DateP\n    }\n    for(Date in datecam){\n      \n    #for each plant along that transect at that date\n    pres<-a %>% filter(Transect_R %in% transect,DateP %in% Date) %>% distinct(Iplant_Double) %>% .$Iplant_Double\n    \n        #Which day in samplign\n        dday<-a %>% filter(Transect_R %in% transect,DateP %in% Date) %>% distinct(Day) %>% .$Day\n\n      for (plant in pres){\n        #Get mean elevation of that plant record\n        camelev<- a %>% filter(Transect_R %in% transect,DateP %in% Date,Iplant_Double %in% plant) %>% .$ele %>% mean()\n        \n        #Which birds are present at that observation\n        predh<-elevH[((elevH$Low < camelev) & (camelev < elevH$High)),\"Hummingbird\"]\n        \n        if(length(predh)==0){next}\n        \n        #Make absences from those )(cat not the best)\n        add_absences<-data.frame(Hummingbird=predh,Iplant_Double=plant,Time=t,ID=j,DateP=Date,Month=min(a$Month),Year=unique(a$Year),Transect_R=transect,ele=camelev,Day=dday,Survey_Type=unique(a$Survey_Type),Yobs=0)\n        absences<-append(absences,list(add_absences))\n      }\n    }\n  }\n}\n    \nindatab<-rbind_all(absences)\n\n#merge with original data\nindat<-rbind_all(list(indatraw,indatab))\n```\n\n```{r}\n#Get trait information\n#match the traits\nindat<-merge(indat,traitmelt,by=c(\"Hummingbird\",\"Iplant_Double\"))\n```\n\nReformat index for jags.\nJags needs a vector of input species 1:n with no breaks.\n\n```{r}\n#Easiest to work with jags as numeric ordinal values\nindat$Hummingbird<-as.factor(indat$Hummingbird)\nindat$Iplant_Double<-as.factor(indat$Iplant_Double)\nindat$jBird<-as.numeric(indat$Hummingbird)\nindat$jPlant<-as.numeric(indat$Iplant_Double)\n\njagsIndexBird<-data.frame(Hummingbird=levels(indat$Hummingbird),jBird=1:length(levels(indat$Hummingbird)))\n \njagsIndexPlants<-data.frame(Iplant_Double=levels(indat$Iplant_Double),jPlant=1:length(levels(indat$Iplant_Double)))\n\n#Similiarly, the trait matrix needs to reflect this indexing.\njTraitmatch<-traitmatchT[rownames(traitmatchT) %in% unique(indat$Hummingbird),colnames(traitmatchT) %in% unique(indat$Iplant_Double)]\n```\n\n#Resources at each month\n\nIn our model the covariate is indexed at the scale at which the latent count is considered fixed. This means we need the resource availability per month across the entire elevation gradient for each point.\n\n```{r,fig.height=5,fig.width=9}\n#Get flower transect data\nfull.fl<-read.csv(\"C:/Users/Ben/Dropbox/Thesis/Maquipucuna_SantaLucia/Results/FlowerTransects/FlowerTransectClean.csv\")[,-1]\n\n #month should be capital \ncolnames(full.fl)[colnames(full.fl) %in% \"month\"]<-\"Month\"\n\n#group by month and replicate, remove date errors by making a max of 10 flowers, couple times where the gps places it in wrong transect by 1 to 2 meters. \nflower.month<-group_by(full.fl,Month,Year,Transect_R,Date_F) %>% dplyr::summarise(Flowers=sum(Total_Flowers,na.rm=TRUE))  %>% filter(Flowers>20)\n  \n#Make month abbreviation column, with the right order\nflower.month$Month.a<-factor(month.abb[flower.month$Month],month.abb[c(1:12)])\n\n#Make year factor column\nflower.month$Year<-as.factor(flower.month$Year)\n\n#get quantile for each transect\nthresh<-melt(group_by(flower.month,Transect_R) %>% summarize(Threshold=quantile(log(Flowers),0.5)) )\nflower.month<-merge(flower.month,thresh)\nflower.month$High<-log(flower.month$Flowers)>flower.month$value\n\n#fix the levels\nlevels(flower.month$Transect_R)<-c(\"1300m - 1500m\", \"1500m - 1700m\",\"1700m - 1900m\",\"1900m - 2100m\",\"2100m - 2300m\",\"2300m - 2500m\")\n#plot\nggplot(flower.month,aes(x=Month.a,log(Flowers),col=High,shape=as.factor(Year))) + geom_point(size=3) + theme_bw()  + geom_smooth(aes(group=1)) + ylab(\"Flowers\") + xlab(\"Month\") + facet_wrap(~Transect_R,scales=\"free_y\") + labs(shape=\"Year\", y= \"Log Available Flowers\") + scale_x_discrete(breaks=month.abb[seq(1,12,2)]) + scale_color_manual(labels=c(\"Low\",\"High\"),values=c(\"black\",\"red\")) + labs(col=\"Resource Availability\")\n\n#turn min and max elvation into seperate columns for the range\nflower.month$minElev<-as.numeric(str_extract(flower.month$Transect_R,\"(\\\\d+)\"))\nflower.month$maxElev<-as.numeric(str_match(flower.month$Transect_R,\"(\\\\d+)_(\\\\d+)\")[,3])\n```\n\n```{r}\nindat$All_Flowers<-NA\nindat$Used_Flowers<-NA\nindat$FlowerA<-NA\n\n#Resource list for each species.\nslist<-int %>% group_by(Hummingbird,Iplant_Double) %>% distinct() %>% dplyr::select(Hummingbird,Iplant_Double) %>% arrange(Hummingbird)\n\n#Create time ID for flower transects\nfull.fl$Time<-paste(full.fl$Month,full.fl$Year,sep=\"_\")\n\n#all flowers for each ID period\nallF<-full.fl %>% group_by(Month,Year,Transect_R,Date_F) %>% summarize(n=sum(Total_Flowers,na.rm=T)) %>% summarize(mn=mean(n)) %>% summarize(F=sum(mn)) %>% as.data.frame()\n\n#Individual flowers for each ID period\nindF<-full.fl %>% group_by(Iplant_Double,Month,Year,Transect_R,Date_F) %>% summarize(n=sum(Total_Flowers,na.rm=T)) %>% summarize(mn=mean(n)) %>% summarize(F=sum(mn)) %>% as.data.frame()\n\n\nfor (x in 1:nrow(indat)){\n\n#All flowers\n indat$All_Flowers[x]<-allF[allF$Month %in% indat$Month[x] & allF$Year %in% indat$Year[x],\"F\"]\n \n #filter by species used by hummingbird\n sp_list<-slist[slist$Hummingbird %in% indat$Hummingbird[x],\"Iplant_Double\"]\n\n indat$Used_Flowers[x]<-sum(indF[indF$Iplant_Double %in% sp_list$Iplant_Double & indF$Month %in% indat$Month[x] & indF$Year %in% indat$Year[x],\"F\"])\n  \n  #just the abundance of that species\n  indat$FlowerA[x]<-sum(indF[indF$Iplant_Double %in% indat$Iplant_Double[x] & indF$Month %in% indat$Month[x] & indF$Year %in% indat$Year[x],\"F\"])\n\n}\n```\n\n###Relationship between resource measures\n\n```{r}\nggplot(indat,aes(x=All_Flowers,y=Used_Flowers)) + geom_point() + facet_wrap(~Hummingbird,scales=\"free\")\n```\n\n##Binary Measures of Resources\n\n```{r}\n#All Resources\nindat$BAll_Flowers<-(indat$Month  %in% c(\"6\",\"7\",\"8\",\"9\",\"10\"))*1\n  #(indat$All_Flowers > quantile(indat$All_Flowers,0.75))*1\n\nqthresh<-indat %>% group_by(Hummingbird) %>% summarize(UThresh=quantile(Used_Flowers,0.75))\n\nindat<-merge(indat,qthresh)\nindat$BUsed_Flowers<-(indat$Used_Flowers > indat$UThresh)*1\n\nfthresh<-indat %>% group_by(Hummingbird) %>% summarize(FThresh=mean(FlowerA))\nindat<-merge(indat,fthresh)\nindat$BFlowerA<-(indat$FlowerA > indat$FThresh)*1\n```\n\n```{r}\n#Combine resources with observed data\nf<-(indat$Survey_Type==\"Camera\")*1\nf[f==0]<-NA\nindat$Camera<-indat$Yobs * f\n\nf<-(indat$Survey_Type==\"Transect\")*1\nf[f==0]<-NA\nindat$Transect<-indat$Yobs * f\n\nindat<-droplevels(indat)\n\n#Turn Time and ID into numeric indexes\nindat$jTime<-as.numeric(as.factor(indat$Time))\nindat$jID<-as.numeric(as.factor(indat$ID))\n\n#index resources\nindat$scaledR<-indat$BAll_Flowers\nresourceMatrix<-indat %>% group_by(jBird,jPlant,jTime) %>% summarize(v=mean(scaledR))  %>% acast(jBird ~ jPlant ~ jTime,value.var='v',fill=0)\n\n##melted version for plotting\nmindat<-melt(indat,measure.vars=c(\"Camera\",\"Transect\"))\n```\n\n##View species identity in resource splits.\n\n```{r,fig.height=4,width=6,eval=F}\n#Count of species in both time sets\nsplist<-mindat %>% filter(value>0) %>% group_by(Hummingbird,Resource= BUsed_Flowers) %>% distinct(Iplant_Double) %>% dplyr::select(Iplant_Double)\n\n#relevel text\nsplist$Resource<-factor(as.factor(as.character(splist$Resource)),labels = c(\"Low\",\"High\"))\n\nsplist<-split(splist,splist$Hummingbird)\np<-list()\nfor (x in 1:length(splist)){\n  split_sp<-split(splist[[x]]$Iplant_Double,splist[[x]]$Resource)\n  p[[x]]<-venn.diagram(split_sp,filename=NULL,scaled=T,main =unique(splist[[x]]$Hummingbird),fill=c(\"Blue\",\"Red\"),alpha=c(.25,.75),cat.cex=1.5,cex=.75,main.cex=2)\n\n  #get index\n  labs<-lapply(p[[x]],function(i) i$label)\n  \n  in_low<-which(labs == \"Low\")\n\n  in_high<-which(labs == \"High\")\n\n#edit labels, depends on length\n#which is low\n  if(length(p[[x]])==10){\n  p[[x]][[in_low-3]]$label<-paste(split_sp$Low[!split_sp$Low %in% split_sp$High],collapse=\"\\n\")\n\n  p[[x]][[in_high-3]]$label<-paste(split_sp$High[!split_sp$High %in% split_sp$Low],collapse=\"\\n\")\n  }\n  \n  if(length(p[[x]])==9 & !is.null(labs[[4]])){\n      p[[x]][[in_low-3]]$label<-paste(split_sp$Low[!split_sp$Low %in% split_sp$High],collapse=\"\\n\")\n\n  p[[x]][[in_high-1]]$label<-paste(split_sp$High[!split_sp$High %in% split_sp$Low],collapse=\"\\n\")\n  }\n  if(length(p[[x]])==9 & is.null(labs[[4]])){\n      p[[x]][[in_low-2]]$label<-paste(split_sp$Low[!split_sp$Low %in% split_sp$High],collapse=\"\\n\")\n\n  p[[x]][[in_high-2]]$label<-paste(split_sp$High[!split_sp$High %in% split_sp$Low],collapse=\"\\n\")\n  }\n  grid.newpage()\n  grid.draw(p[[x]])\n}\n\n#venn diagram writes a silly set of log files\nfile.remove(list.files(pattern=\"*.log\"))\n```\n\n\n```{r}\ngc()\nsave.image(\"Observed.Rdata\")\n``` \n\n",
    "created" : 1465482800125.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "876874564",
    "id" : "92486368",
    "lastKnownWriteTime" : 1465597834,
    "path" : "~/NetworkPredict/Observed2m.Rmd",
    "project_path" : "Observed2m.Rmd",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "type" : "r_markdown"
}